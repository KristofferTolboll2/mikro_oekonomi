{"version":3,"sources":["logo.svg","NavBar.js","Layout.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","Component","Layout","NavBar_NavBar","this","props","children","Content","state","darkTheme","_this2","console","log","Helmet","href","rel","integrity","crossorigin","className","class","type","id","onChange","e","setState","prevState","for","App","Layout_Layout","Content_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8KCEnBC,sMAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sCAJ4BC,cCCfC,mLAEjB,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAD,MADF,IAIIC,KAAKC,MAAMC,SAJf,YAH8BL,mCCEfM,6MACjBC,MAAO,CACHC,WAAW,2EAER,IAAAC,EAAAN,KAEP,OADEO,QAAQC,IAAIR,KAAKI,MAAMC,WAEvBX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACa,EAAA,OAAD,KACIf,EAAAC,EAAAC,cAAA,iCACEI,KAAKI,MAAMC,UACbX,EAAAC,EAAAC,cAAA,QAAMc,KAAK,8EAA8EC,IAAI,aAAaC,UAAU,0EAA0EC,YAAY,cACxMnB,EAAAC,EAAAC,cAAA,QAAMc,KAAK,gFAAgFC,IAAI,aAAaC,UAAU,0EAA0EC,YAAY,eAIzMnB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACfpB,EAAAC,EAAAC,cAAA,OAAKmB,MAAM,gCACxBrB,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,WAAWD,MAAM,uBAAuBE,GAAG,gBAAgBC,SAAU,SAACC,GAAD,OAAOb,EAAKc,SAAU,SAAAC,GAAS,MAAK,CAClHhB,WAAYgB,EAAUhB,gBAEzBX,EAAAC,EAAAC,cAAA,SAAOmB,MAAM,uBAAuBO,IAAI,iBAAxC,yBAEU5B,EAAAC,EAAAC,cAAA,oBAGAF,EAAAC,EAAAC,cAAA,uEACAF,EAAAC,EAAAC,cAAA,UAAQoB,KAAK,SAASD,MAAM,mBAA5B,oBA3BqBlB,aCiBtB0B,mLAVX,OACA7B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4B,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,eAPY5B,aCIE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4df72595.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nexport default class NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>this is a navbar</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport NavBar from './NavBar'\r\n\r\nexport default class Layout extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar /> {/* this could be your navbar */}\r\n         {/*you could have mere stuff in here*/}\r\n\r\n         {this.props.children} {/*here my content will get rendered */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport {Helmet} from 'react-helmet'\r\n\r\nexport default class Content extends Component {\r\n    state= {\r\n        darkTheme: false\r\n    }\r\n  render() {\r\n      console.log(this.state.darkTheme)\r\n    return (\r\n      <div>\r\n          <Helmet>\r\n              <title>Mikroøkononoi</title>\r\n               {this.state.darkTheme ?\r\n              <link href=\"https://stackpath.bootstrapcdn.com/bootswatch/4.3.1/slate/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-FBPbZPVh+7ks5JJ70RJmIaqyGnvMbeJ5JQfEbW0Ac6ErfvEg9yG56JQJuMNptWsH\" crossorigin=\"anonymous\"></link>\r\n            :   <link href=\"https://stackpath.bootstrapcdn.com/bootswatch/4.3.1/simplex/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1OYccka9EByiS23wvPFiYHBPRAgU91xYVFb8g8sen6vRiBI5Uko6+B87q8zPGUnA\" crossorigin=\"anonymous\"></link>\r\n               }\r\n          </Helmet>\r\n\r\n                   <div className=\"App\">\r\n                   <div class=\"custom-control custom-switch\">\r\n      <input type=\"checkbox\" class=\"custom-control-input\" id=\"customSwitch1\" onChange={(e) => this.setState((prevState => ({\r\n         darkTheme: !prevState.darkTheme\r\n      })))} />\r\n      <label class=\"custom-control-label\" for=\"customSwitch1\">Change to Dark Theme</label>\r\n         </div>\r\n                <h1>My App</h1>\r\n\r\n           \r\n                <p>Vi løser dine ligninger og giver dig karakterstigninger</p>\r\n                <button type=\"button\" class=\"btn btn-warning\">Warning</button>\r\n            </div>\r\n \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TimeAgo, {Formatter} from 'react-timeago'\nimport Layout from './Layout'\nimport Content from './Content'\n\n\nclass App extends Component {\n\n   \n  render() {\n    return(\n    <div>\n    <Layout>\n      <Content />\n    </Layout>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}