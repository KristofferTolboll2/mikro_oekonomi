{"version":3,"sources":["logo.svg","NavBar.js","Layout.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","Component","Layout","NavBar_NavBar","this","props","children","Content","state","darkTheme","_React$createElement","_React$createElement2","_this2","console","log","Helmet","rel","href","Object","defineProperty","integrity","crossorigin","className","class","type","id","onChange","e","setState","prevState","for","App","Layout_Layout","Content_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8KCEnBC,sMAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sCAJ4BC,cCCfC,mLAEjB,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAD,MADF,IAIIC,KAAKC,MAAMC,SAJf,YAH8BL,0CCEfM,6MACjBC,MAAO,CACHC,WAAW,2EAER,IAAAC,EAAAC,EAAAC,EAAAR,KAEP,OADES,QAAQC,IAAIV,KAAKI,MAAMC,WAEvBX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAA,OAAD,KACIjB,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,QAAAU,EAAA,CAAMM,IAAI,UAAUC,KAAK,+EAAzBC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,MAA2G,cAA3GQ,OAAAC,EAAA,EAAAD,CAAAR,EAAA,YAAmI,2EAAnIQ,OAAAC,EAAA,EAAAD,CAAAR,EAAA,KAAgN,SAAhNA,IACAZ,EAAAC,EAAAC,cAAA,QAAAW,EAAA,CAAMK,IAAI,UAAUC,KAAK,+EAAzBC,OAAAC,EAAA,EAAAD,CAAAP,EAAA,MAA2G,cAA3GO,OAAAC,EAAA,EAAAD,CAAAP,EAAA,YAAkI,2EAAlIO,OAAAC,EAAA,EAAAD,CAAAP,EAAA,KAA+M,SAA/MA,IACEP,KAAKI,MAAMC,UACbX,EAAAC,EAAAC,cAAA,QAAMiB,KAAK,8EAA8ED,IAAI,aAAcI,UAAU,0EAA0EC,YAAY,cAC1MvB,EAAAC,EAAAC,cAAA,QAAMiB,KAAK,8EAA8ED,IAAI,aAAaI,UAAU,0EAA0EC,YAAY,eAItMvB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACfxB,EAAAC,EAAAC,cAAA,OAAKuB,MAAM,gCACxBzB,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,WAAWD,MAAM,uBAAuBE,GAAG,gBAAgBC,SAAU,SAACC,GAAD,OAAOf,EAAKgB,SAAU,SAAAC,GAAS,MAAK,CAClHpB,WAAYoB,EAAUpB,gBAEzBX,EAAAC,EAAAC,cAAA,SAAOuB,MAAM,uBAAuBO,IAAI,iBAAxC,yBAEUhC,EAAAC,EAAAC,cAAA,oBAGAF,EAAAC,EAAAC,cAAA,uEACAF,EAAAC,EAAAC,cAAA,UAAQwB,KAAK,SAASD,MAAM,mBAA5B,oBA7BqBtB,aCiBtB8B,mLAVX,OACAjC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAACiC,EAAD,eAPYhC,aCIEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d2d77479.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react'\r\n\r\nexport default class NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>this is a navbar</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport NavBar from './NavBar'\r\n\r\nexport default class Layout extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar /> {/* this could be your navbar */}\r\n         {/*you could have mere stuff in here*/}\r\n\r\n         {this.props.children} {/*here my content will get rendered */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport {Helmet} from 'react-helmet'\r\n\r\nexport default class Content extends Component {\r\n    state= {\r\n        darkTheme: false\r\n    }\r\n  render() {\r\n      console.log(this.state.darkTheme)\r\n    return (\r\n      <div>\r\n          <Helmet>\r\n              <title>Mikroøkononoi</title>\r\n              <link rel=\"preload\" href=\"https://stackpath.bootstrapcdn.com/bootswatch/4.3.1/slate/bootstrap.min.css\" rel=\"stylesheet\"  integrity=\"sha384-FBPbZPVh+7ks5JJ70RJmIaqyGnvMbeJ5JQfEbW0Ac6ErfvEg9yG56JQJuMNptWsH\" as=\"style\"></link>\r\n              <link rel=\"preload\" href=\"https://stackpath.bootstrapcdn.com/bootswatch/4.3.1/minty/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-9NlqO4dP5KfioUGS568UFwM3lbWf3Uj3Qb7FBHuIuhLoDp3ZgAqPE1/MYLEBPZYM\" as=\"style\"></link>\r\n               {this.state.darkTheme ?\r\n              <link href=\"https://stackpath.bootstrapcdn.com/bootswatch/4.3.1/slate/bootstrap.min.css\" rel=\"stylesheet\"  integrity=\"sha384-FBPbZPVh+7ks5JJ70RJmIaqyGnvMbeJ5JQfEbW0Ac6ErfvEg9yG56JQJuMNptWsH\" crossorigin=\"anonymous\"></link>\r\n            :  <link href=\"https://stackpath.bootstrapcdn.com/bootswatch/4.3.1/minty/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-9NlqO4dP5KfioUGS568UFwM3lbWf3Uj3Qb7FBHuIuhLoDp3ZgAqPE1/MYLEBPZYM\" crossorigin=\"anonymous\"></link>\r\n               }\r\n          </Helmet>\r\n\r\n                   <div className=\"App\">\r\n                   <div class=\"custom-control custom-switch\">\r\n      <input type=\"checkbox\" class=\"custom-control-input\" id=\"customSwitch1\" onChange={(e) => this.setState((prevState => ({\r\n         darkTheme: !prevState.darkTheme\r\n      })))} />\r\n      <label class=\"custom-control-label\" for=\"customSwitch1\">Change to Dark Theme</label>\r\n         </div>\r\n                <h1>My App</h1>\r\n\r\n           \r\n                <p>Vi løser dine ligninger og giver dig karakterstigninger</p>\r\n                <button type=\"button\" class=\"btn btn-warning\">Warning</button>\r\n            </div>\r\n \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport TimeAgo, {Formatter} from 'react-timeago'\r\nimport Layout from './Layout'\r\nimport Content from './Content'\r\n\r\n\r\nclass App extends Component {\r\n\r\n   \r\n  render() {\r\n    return(\r\n    <div>\r\n    <Layout>\r\n      <Content />\r\n    </Layout>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}